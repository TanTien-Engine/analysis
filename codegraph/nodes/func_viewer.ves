import "blueprint.nodes.commentary" for Commentary
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "codegraph.nodes.variable" for Variable
import "codegraph.nodes.statement" for Statement
import "codegraph.variant" for VAR_TYPE_NODE

import "blueprint.nodes.number" for Number

class FuncViewer is Commentary
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "func", VAR_TYPE_NODE)
		]

		this.layout()

		this.title = "DFD"

		this.editor = nil
	}

	on_pin_dirty(pin)
	{
		var v_items = Blueprint.calc_input_value(this, 0)
		if (!v_items) {
			return nil
		}

		this.rebuild()
	}

	on_scene_add(editor) 
	{
		this.editor = editor
	}

	rebuild()
	{
		var v_func = Blueprint.calc_input_value(this, 0)
		if (!v_func) {
			return nil
		}

		var nodes = v_func.value.gen_func_graph()
		if (nodes.count != 2) {
			return nil
		}

		for (var i = 0; i < nodes[0].count; i = i + 1)
		{
			var node = Variable()
			node.var_node = nodes[0][i]
			this.editor.add_node(node, 168, 75 + i * 50)
		}
		for (var i = 0; i < nodes[1].count; i = i + 1)
		{
			var node = Statement()
			node.stat_node = nodes[1][i]
			this.editor.add_node(node, 228, 75 + i * 50)
		}
	}
}