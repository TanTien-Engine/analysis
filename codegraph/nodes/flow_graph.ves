import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.nodes.subgraph" for Subgraph
import "codegraph.variant" for VAR_TYPE_NODE
import "codegraph.nodes.basic_block" for BasicBlock
import "network.network" for Network
import "network.vertex_shape" for PIN_CAPSULE_TOP_IDX, PIN_CAPSULE_BOTTOM_IDX, PIN_CAPSULE_RIGHT_IDX, PIN_CAPSULE_LEFT_IDX
import "network.pin" for Pin as NW_Pin
import "maths" for Matrix2D

class FlowGraph is Subgraph
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "root", VAR_TYPE_NODE)
		]

		this.layout()

		this.title = "CFG"

		this.editor = nil
	}

	on_pin_dirty(pin)
	{
		this.rebuild()
	}

	on_scene_add(editor) 
	{
		this.editor = editor
	}

	add_node(node, x, y)
	{
		super.add_node(node, x, y)

		var mat = Matrix2D.init()
		mat.transform(x, y, 0, 1, 1, 0, 0, 0, 0)
		node.update(mat)
	}

	load_from_string(editor, str, sub_editor, module_name)
	{
		super.load_from_string(editor, str, sub_editor, module_name)

		var v_root = Blueprint.calc_input_value(this, 0)
		if (!v_root) {
			return nil
		}

		var nodes = v_root.value.gen_flow_graph()
		if (nodes.count == this.all_items.count) {
			for (var i = 0; i < nodes.count; i = i + 1) {
				item[0].bb_node = nodes[i]
			}
		}
	}

	rebuild()
	{
		var v_root = Blueprint.calc_input_value(this, 0)		
		if (!v_root) {
			return nil
		}

		var root = v_root.value.gen_flow_graph()

		var children = root.get_children()
		for (var i = 0; i < children.count; i = i + 1) 
		{
			var map2node = {}
			this.build_graph(children[i], i * 400, 0, map2node)

			// conn to targ
			for (var pair in map2node) 
			{
				var node = pair.value
				var targ = node.bb_node.get_target()
				if (targ) {
					this.connect_skip(node, map2node[targ.get_uid()])
				}
			}

			// fix pos
			for (var pair in map2node) 
			{
				var node = pair.value
				var x = (node.pos3[1] + node.pos3[2]) / 2
				var y = node.pos3[0]
				this.add_node(node, x, y)
			}
		}
	}

	build_graph(bb, x, y, map2node)
	{
		var bb_uid = bb.get_uid()

		var node = map2node[bb_uid]
		if (!node)
		{
			node = BasicBlock()

			node.bb_node = bb

			node.pos3[0] = y
			node.pos3[1] = x
			node.pos3[2] = x

			map2node[bb_uid] = node
		}
		else
		{
			if (node.pos3[0] > y) {
				node.pos3[0] = y
			}
			node.pos3[2] = x
		}

		var output = bb.get_output()
		if (output.isEmpty) {
			return node
		}

		var dy = 100
		y = y - dy

		var dx = 150
		if (output.count > 2) {
			dx = 100
		}
		x = x - (output.count - 1) * 0.5 * dx

		for (var item in output) 
		{
			var child = this.build_graph(item, x, y, map2node)
			if (child) {
				this.connect_forward(node, child)			
			}

			x = x + dx
		}

		return node
	}

	connect_forward(prev, next)
	{
		this.connect(prev, next, PIN_CAPSULE_TOP_IDX)
	}

	connect_skip(prev, next)
	{
		var prev_y = prev.pos3[0]
		var next_y = next.pos3[0]

		var pos = PIN_CAPSULE_RIGHT_IDX
		if (next_y < prev_y) {
			pos = PIN_CAPSULE_LEFT_IDX
		}

		this.connect(prev, next, pos)
	}

	connect(prev, next, next_pos)
	{
		var pin_f = NW_Pin(prev, PIN_CAPSULE_BOTTOM_IDX)
		var pin_t = NW_Pin(next, next_pos)
		Network.connect(pin_f, pin_t)
	}
}