import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for VAR_TYPE_ANY, VAR_TYPE_ARRAY
import "logger.logger" for Logger
import "loggraph" for Node as lg_Node, Traceback

class Print is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "items", VAR_TYPE_ANY)
		]

		this.layout()
	}

	on_pin_dirty(pin, type, msg)
	{
		super.on_pin_dirty(pin, type, msg)

		this.print_input_value()
	}

	print_input_value()
	{
		var v_input = Blueprint.calc_input_value(this, 0)
		if (!v_input) {
			return nil
		}

		if (v_input.type == VAR_TYPE_ARRAY)
		{
			for (var itr in v_input.value) {
				this.print_item(itr.value)
			}
		}
		else
		{
			this.print_item(v_input.value)
		}
	}

	print_item(item)
	{
		if (item is lg_Node) {
			var name = item.value.get_name()
			Logger.info("++ %(name)")
		} else if (item is Traceback) {
			item.print()
		} else {
			import "logger.logger" for Logger
			Logger.info("Print: %(item)")
		}
	}
}