import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_STRING
import "loggraph.variant" for VAR_TYPE_LOG_NODE
import "loggraph" for LogGraph

class Parse is Node
{
	init() 
	{
		super.init()

		this.imports = [
			Pin(this, "data",  VAR_TYPE_STRING),
			Pin(this, "proto", VAR_TYPE_STRING)
		]
		this.exports = [
			Pin(this, "nodes", VAR_TYPE_ARRAY)
		]

		this.layout()

		this.v_nodes = nil
	}

	on_pin_dirty(pin, type, msg)
	{
		super.on_pin_dirty(pin, type, msg)

		this.v_nodes = nil
	}

	calc_value(idx)
	{
		var v_data = Blueprint.calc_input_value(this, 0)
		if (!v_data) {
			return nil
		}

		var proto = nil
		var v_proto = Blueprint.calc_input_value(this, 1)
		if (v_proto) {
			proto = v_proto.value
		}

		var nodes = LogGraph.parse(v_data.value, proto)
		this.v_nodes = []
		for (var n in nodes) {
			this.v_nodes.add(Variant(VAR_TYPE_LOG_NODE, n))
		}

		return Variant(this.v_nodes)
	}
}